service:
  name: bitwarden-serverless

plugins:
  - serverless-webpack

provider:
  name: aws
  stage: ${opt:stage, 'prod'}
  runtime: nodejs6.10
  memorySize: 256
  timeout: 10
  environment:
    DEVICES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-devices
    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    CIPHERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-ciphers
    FOLDERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-folders
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DEVICES_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CIPHERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FOLDERS_TABLE}"

functions:
  login:
    handler: src/login.handler
    events:
      - http:
          method: post
          cors: true
          path: identity/connect/token
  register:
    handler: src/register.handler
    events:
      - http:
          method: post
          cors: true
          path: api/accounts/register
  sync:
    handler: src/sync.handler
    events:
      - http:
          method: get
          cors: true
          path: api/sync
  cipher_post:
    handler: src/ciphers.postHandler
    events:
      - http:
          method: post
          cors: true
          path: api/ciphers
  cipher_put:
    handler: src/ciphers.putHandler
    events:
      - http:
          method: put
          cors: true
          path: api/ciphers/{uuid}
  cipher_delete:
    handler: src/ciphers.deleteHandler
    events:
      - http:
          method: delete
          cors: true
          path: api/ciphers/{uuid}
  folder_post:
    handler: src/folders.postHandler
    events:
      - http:
          method: post
          cors: true
          path: api/folders
  folder_put:
    handler: src/folders.putHandler
    events:
      - http:
          method: put
          cors: true
          path: api/folders/{uuid}
  folder_delete:
    handler: src/folders.deleteHandler
    events:
      - http:
          method: delete
          cors: true
          path: api/folders/{uuid}
  two_factor_setup:
    handler: src/two_factor.setupHandler
  two_factor_complete:
    handler: src/two_factor.completeHandler
  import_bitwarden:
    handler: src/import.bitwardenHandler
    timeout: 180
    memorySize: 1024
  import_lastpass:
    handler: src/import.lastpassHandler
    timeout: 180
    memorySize: 1024
  default:
    handler: src/default.handler
    events:
      - http:
          method: any
          cors: true
          path: /{fallback}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DevicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DEVICES_TABLE}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CiphersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CIPHERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userUuid
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: userUuid
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FoldersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FOLDERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userUuid
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: userUuid
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
